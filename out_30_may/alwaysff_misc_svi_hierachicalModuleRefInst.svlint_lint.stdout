[93mWarning[97m: Config file '.svlint.toml' is not found. Enable all rules(B[m
[91mFail[97m: style_trailingwhitespace
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:3:1
[94m  |
[94m3 |[37m // NOTE: Lines 29 to 31, 43 to 45, 65 to 67, and 88 to 90. 
[94m  |[93m ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[93m hint  : Remove trailing whitespace.
[94m  |[33m                                                            [33m reason: Trailing whitespace leads to unnecessary awkwardness with version control.
(B[m
[91mFail[97m: default_nettype_none
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:5:1
[94m  |
[94m5 |[37m interface I
[94m  |[93m ^^^^^^^^^[93m hint  : Place `` `default_nettype none`` at the top of source code.
[94m  |[33m          [33m reason: Compiler directive `` `default_nettype none`` detects unintentional implicit wires.
(B[m
[91mFail[97m: prefix_interface
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:5:1
[94m  |
[94m5 |[37m interface I
[94m  |[93m ^^^^^^^^^[93m hint  : Prefix `interface` identifier with "ifc_".
[94m  |[33m          [33m reason: Naming convention simplifies audit.
(B[m
[91mFail[97m: re_forbidden_interface
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:5:1
[94m  |
[94m5 |[37m interface I
[94m  |[93m ^^^^^^^^^[93m hint  : Use a interface identifier not matching regex `^[^X](UNCONFIGURED|.*)$`.
[94m  |[33m          [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: re_required_interface
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:5:1
[94m  |
[94m5 |[37m interface I
[94m  |[93m ^^^^^^^^^[93m hint  : Use a interface identifier matching regex `^[a-z]+[a-z0-9_]*$`.
[94m  |[33m          [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: lowercamelcase_interface
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:5:11
[94m  |
[94m5 |[37m interface I
[94m  |[93m           ^[93m hint  : Begin `interface` name with lowerCamelCase.
[94m  |[33m            [33m reason: Naming convention simplifies audit.
(B[m
[91mFail[97m: input_with_var
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:6:5
[94m  |
[94m6 |[37m   ( input logic i_clk
[94m  |[93m     ^^^^^[93m hint  : Specify `var` datakind on `input` ports.
[94m  |[33m          [33m reason: Default datakind of input port is a tri-state net.
(B[m
[91mFail[97m: re_forbidden_port_input
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:6:17
[94m  |
[94m6 |[37m   ( input logic i_clk
[94m  |[93m                 ^^^^^[93m hint  : Use a port identifier not matching regex `^[^X](UNCONFIGURED|.*)$`.
[94m  |[33m                      [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: re_forbidden_localparam
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:13:18
[94m   |
[94m13 |[37m   localparam bit Z = 1'b0;
[94m   |[93m                  ^[93m hint  : Use a localparam identifier not matching regex `^[^X](UNCONFIGURED|.*)$`.
[94m   |[33m                   [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: blocking_assignment_in_always_ff
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:15:3
[94m   |
[94m15 |[37m   always_ff @(posedge i_clk) z = Z;      // Constant
[94m   |[93m   ^^^^^^^^^[93m hint  : Do not use blocking assignments within `always_ff`.
[94m   |[33m            [33m reason: Blocking assignment in `always_ff` may cause undefined event ordering.
(B[m
[91mFail[97m: blocking_assignment_in_always_ff
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:16:3
[94m   |
[94m16 |[37m   always_ff @(posedge i_clk) y = 1'b1;   // Literal
[94m   |[93m   ^^^^^^^^^[93m hint  : Do not use blocking assignments within `always_ff`.
[94m   |[33m            [33m reason: Blocking assignment in `always_ff` may cause undefined event ordering.
(B[m
[91mFail[97m: blocking_assignment_in_always_ff
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:17:3
[94m   |
[94m17 |[37m   always_ff @(posedge i_clk) x = z;      // Signal
[94m   |[93m   ^^^^^^^^^[93m hint  : Do not use blocking assignments within `always_ff`.
[94m   |[33m            [33m reason: Blocking assignment in `always_ff` may cause undefined event ordering.
(B[m
[91mFail[97m: default_nettype_none
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:22:1
[94m   |
[94m22 |[37m module M1
[94m   |[93m ^^^^^^[93m hint  : Place `` `default_nettype none`` at the top of source code.
[94m   |[33m       [33m reason: Compiler directive `` `default_nettype none`` detects unintentional implicit wires.
(B[m
[91mFail[97m: prefix_module
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:22:1
[94m   |
[94m22 |[37m module M1
[94m   |[93m ^^^^^^[93m hint  : Prefix `module` identifier with "mod_".
[94m   |[33m       [33m reason: Naming convention simplifies audit.
(B[m
[91mFail[97m: re_forbidden_module_ansi
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:22:1
[94m   |
[94m22 |[37m module M1
[94m   |[93m ^^^^^^[93m hint  : Use a module identifier not matching regex `^[^X](UNCONFIGURED|.*)$`.
[94m   |[33m       [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: re_required_module_ansi
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:22:1
[94m   |
[94m22 |[37m module M1
[94m   |[93m ^^^^^^[93m hint  : Use a module identifier matching regex `^[a-z]+[a-zA-Z0-9_]*$`.
[94m   |[33m       [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: lowercamelcase_module
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:22:8
[94m   |
[94m22 |[37m module M1
[94m   |[93m        ^^[93m hint  : Begin `module` name with lowerCamelCase.
[94m   |[33m          [33m reason: Naming convention simplifies audit.
(B[m
[91mFail[97m: interface_port_with_modport
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:23:5
[94m   |
[94m23 |[37m   ( I u_I
[94m   |[93m     ^[93m hint  : Specify the modport on the interface port.
[94m   |[33m      [33m reason: Without a modport, the interface port signals are all implictly `inout`.
(B[m
[91mFail[97m: lowercamelcase_interface
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:23:5
[94m   |
[94m23 |[37m   ( I u_I
[94m   |[93m     ^[93m hint  : Begin `interface` name with lowerCamelCase.
[94m   |[33m      [33m reason: Naming convention simplifies audit.
(B[m
[91mFail[97m: re_forbidden_port_inout
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:23:7
[94m   |
[94m23 |[37m   ( I u_I
[94m   |[93m       ^^^[93m hint  : Use a port identifier not matching regex `^[^X](UNCONFIGURED|.*)$`.
[94m   |[33m          [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: re_forbidden_port_interface
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:23:7
[94m   |
[94m23 |[37m   ( I u_I
[94m   |[93m       ^^^[93m hint  : Use a port identifier not matching regex `^[^X](UNCONFIGURED|.*)$`.
[94m   |[33m          [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: re_required_port_inout
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:23:7
[94m   |
[94m23 |[37m   ( I u_I
[94m   |[93m       ^^^[93m hint  : Use a port identifier matching regex `^[a-z]+[a-z0-9_]*$`.
[94m   |[33m          [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: re_required_port_interface
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:23:7
[94m   |
[94m23 |[37m   ( I u_I
[94m   |[93m       ^^^[93m hint  : Use a port identifier matching regex `^[a-z]+[a-z0-9_]*$`.
[94m   |[33m          [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: output_with_var
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:24:5
[94m   |
[94m24 |[37m   , output logic a
[94m   |[93m     ^^^^^^[93m hint  : Specify `var` datakind on `output` ports.
[94m   |[33m           [33m reason: Explicit datakind of output ports should be consistent with input ports.
(B[m
[91mFail[97m: prefix_output
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:24:5
[94m   |
[94m24 |[37m   , output logic a
[94m   |[93m     ^^^^^^[93m hint  : Prefix `output` port identifier with "o_".
[94m   |[33m           [33m reason: Port prefixes help readers to follow signals through modules.
(B[m
[91mFail[97m: re_forbidden_port_output
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:24:18
[94m   |
[94m24 |[37m   , output logic a
[94m   |[93m                  ^[93m hint  : Use a port identifier not matching regex `^[^X](UNCONFIGURED|.*)$`.
[94m   |[33m                   [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: output_with_var
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:25:5
[94m   |
[94m25 |[37m   , output logic b
[94m   |[93m     ^^^^^^[93m hint  : Specify `var` datakind on `output` ports.
[94m   |[33m           [33m reason: Explicit datakind of output ports should be consistent with input ports.
(B[m
[91mFail[97m: prefix_output
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:25:5
[94m   |
[94m25 |[37m   , output logic b
[94m   |[93m     ^^^^^^[93m hint  : Prefix `output` port identifier with "o_".
[94m   |[33m           [33m reason: Port prefixes help readers to follow signals through modules.
(B[m
[91mFail[97m: re_forbidden_port_output
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:25:18
[94m   |
[94m25 |[37m   , output logic b
[94m   |[93m                  ^[93m hint  : Use a port identifier not matching regex `^[^X](UNCONFIGURED|.*)$`.
[94m   |[33m                   [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: output_with_var
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:26:5
[94m   |
[94m26 |[37m   , output logic c
[94m   |[93m     ^^^^^^[93m hint  : Specify `var` datakind on `output` ports.
[94m   |[33m           [33m reason: Explicit datakind of output ports should be consistent with input ports.
(B[m
[91mFail[97m: prefix_output
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:26:5
[94m   |
[94m26 |[37m   , output logic c
[94m   |[93m     ^^^^^^[93m hint  : Prefix `output` port identifier with "o_".
[94m   |[33m           [33m reason: Port prefixes help readers to follow signals through modules.
(B[m
[91mFail[97m: re_forbidden_port_output
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:26:18
[94m   |
[94m26 |[37m   , output logic c
[94m   |[93m                  ^[93m hint  : Use a port identifier not matching regex `^[^X](UNCONFIGURED|.*)$`.
[94m   |[33m                   [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: default_nettype_none
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:36:1
[94m   |
[94m36 |[37m module M2
[94m   |[93m ^^^^^^[93m hint  : Place `` `default_nettype none`` at the top of source code.
[94m   |[33m       [33m reason: Compiler directive `` `default_nettype none`` detects unintentional implicit wires.
(B[m
[91mFail[97m: prefix_module
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:36:1
[94m   |
[94m36 |[37m module M2
[94m   |[93m ^^^^^^[93m hint  : Prefix `module` identifier with "mod_".
[94m   |[33m       [33m reason: Naming convention simplifies audit.
(B[m
[91mFail[97m: re_forbidden_module_ansi
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:36:1
[94m   |
[94m36 |[37m module M2
[94m   |[93m ^^^^^^[93m hint  : Use a module identifier not matching regex `^[^X](UNCONFIGURED|.*)$`.
[94m   |[33m       [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: re_required_module_ansi
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:36:1
[94m   |
[94m36 |[37m module M2
[94m   |[93m ^^^^^^[93m hint  : Use a module identifier matching regex `^[a-z]+[a-zA-Z0-9_]*$`.
[94m   |[33m       [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: lowercamelcase_module
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:36:8
[94m   |
[94m36 |[37m module M2
[94m   |[93m        ^^[93m hint  : Begin `module` name with lowerCamelCase.
[94m   |[33m          [33m reason: Naming convention simplifies audit.
(B[m
[91mFail[97m: interface_port_with_modport
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:37:5
[94m   |
[94m37 |[37m   ( I u_I
[94m   |[93m     ^[93m hint  : Specify the modport on the interface port.
[94m   |[33m      [33m reason: Without a modport, the interface port signals are all implictly `inout`.
(B[m
[91mFail[97m: lowercamelcase_interface
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:37:5
[94m   |
[94m37 |[37m   ( I u_I
[94m   |[93m     ^[93m hint  : Begin `interface` name with lowerCamelCase.
[94m   |[33m      [33m reason: Naming convention simplifies audit.
(B[m
[91mFail[97m: re_forbidden_port_inout
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:37:7
[94m   |
[94m37 |[37m   ( I u_I
[94m   |[93m       ^^^[93m hint  : Use a port identifier not matching regex `^[^X](UNCONFIGURED|.*)$`.
[94m   |[33m          [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: re_forbidden_port_interface
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:37:7
[94m   |
[94m37 |[37m   ( I u_I
[94m   |[93m       ^^^[93m hint  : Use a port identifier not matching regex `^[^X](UNCONFIGURED|.*)$`.
[94m   |[33m          [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: re_required_port_inout
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:37:7
[94m   |
[94m37 |[37m   ( I u_I
[94m   |[93m       ^^^[93m hint  : Use a port identifier matching regex `^[a-z]+[a-z0-9_]*$`.
[94m   |[33m          [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: re_required_port_interface
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:37:7
[94m   |
[94m37 |[37m   ( I u_I
[94m   |[93m       ^^^[93m hint  : Use a port identifier matching regex `^[a-z]+[a-z0-9_]*$`.
[94m   |[33m          [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: output_with_var
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:38:5
[94m   |
[94m38 |[37m   , output logic a
[94m   |[93m     ^^^^^^[93m hint  : Specify `var` datakind on `output` ports.
[94m   |[33m           [33m reason: Explicit datakind of output ports should be consistent with input ports.
(B[m
[91mFail[97m: prefix_output
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:38:5
[94m   |
[94m38 |[37m   , output logic a
[94m   |[93m     ^^^^^^[93m hint  : Prefix `output` port identifier with "o_".
[94m   |[33m           [33m reason: Port prefixes help readers to follow signals through modules.
(B[m
[91mFail[97m: re_forbidden_port_output
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:38:18
[94m   |
[94m38 |[37m   , output logic a
[94m   |[93m                  ^[93m hint  : Use a port identifier not matching regex `^[^X](UNCONFIGURED|.*)$`.
[94m   |[33m                   [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: output_with_var
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:39:5
[94m   |
[94m39 |[37m   , output logic b
[94m   |[93m     ^^^^^^[93m hint  : Specify `var` datakind on `output` ports.
[94m   |[33m           [33m reason: Explicit datakind of output ports should be consistent with input ports.
(B[m
[91mFail[97m: prefix_output
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:39:5
[94m   |
[94m39 |[37m   , output logic b
[94m   |[93m     ^^^^^^[93m hint  : Prefix `output` port identifier with "o_".
[94m   |[33m           [33m reason: Port prefixes help readers to follow signals through modules.
(B[m
[91mFail[97m: re_forbidden_port_output
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:39:18
[94m   |
[94m39 |[37m   , output logic b
[94m   |[93m                  ^[93m hint  : Use a port identifier not matching regex `^[^X](UNCONFIGURED|.*)$`.
[94m   |[33m                   [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: output_with_var
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:40:5
[94m   |
[94m40 |[37m   , output logic c
[94m   |[93m     ^^^^^^[93m hint  : Specify `var` datakind on `output` ports.
[94m   |[33m           [33m reason: Explicit datakind of output ports should be consistent with input ports.
(B[m
[91mFail[97m: prefix_output
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:40:5
[94m   |
[94m40 |[37m   , output logic c
[94m   |[93m     ^^^^^^[93m hint  : Prefix `output` port identifier with "o_".
[94m   |[33m           [33m reason: Port prefixes help readers to follow signals through modules.
(B[m
[91mFail[97m: re_forbidden_port_output
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:40:18
[94m   |
[94m40 |[37m   , output logic c
[94m   |[93m                  ^[93m hint  : Use a port identifier not matching regex `^[^X](UNCONFIGURED|.*)$`.
[94m   |[33m                   [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: lowercamelcase_module
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:47:3
[94m   |
[94m47 |[37m   M1 u_M1 
[94m   |[93m   ^^[93m hint  : Begin `module` name with lowerCamelCase.
[94m   |[33m     [33m reason: Naming convention simplifies audit.
(B[m
[91mFail[97m: re_forbidden_instance
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:47:6
[94m   |
[94m47 |[37m   M1 u_M1 
[94m   |[93m      ^^^^[93m hint  : Use an instance identifier not matching regex `^[^X](UNCONFIGURED|.*)$`.
[94m   |[33m          [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: re_required_instance
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:47:6
[94m   |
[94m47 |[37m   M1 u_M1 
[94m   |[93m      ^^^^[93m hint  : Use an instance identifier matching regex `^[a-z]+[a-z0-9_]*$`.
[94m   |[33m          [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: style_trailingwhitespace
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:48:0
[94m   |
[94m48 |[37m 
[94m   |[93m [93m hint  : Remove trailing whitespace.
[94m   |[33m [33m reason: Trailing whitespace leads to unnecessary awkwardness with version control.
(B[m
[91mFail[97m: default_nettype_none
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:54:1
[94m   |
[94m54 |[37m module M3
[94m   |[93m ^^^^^^[93m hint  : Place `` `default_nettype none`` at the top of source code.
[94m   |[33m       [33m reason: Compiler directive `` `default_nettype none`` detects unintentional implicit wires.
(B[m
[91mFail[97m: prefix_module
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:54:1
[94m   |
[94m54 |[37m module M3
[94m   |[93m ^^^^^^[93m hint  : Prefix `module` identifier with "mod_".
[94m   |[33m       [33m reason: Naming convention simplifies audit.
(B[m
[91mFail[97m: re_forbidden_module_ansi
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:54:1
[94m   |
[94m54 |[37m module M3
[94m   |[93m ^^^^^^[93m hint  : Use a module identifier not matching regex `^[^X](UNCONFIGURED|.*)$`.
[94m   |[33m       [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: re_required_module_ansi
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:54:1
[94m   |
[94m54 |[37m module M3
[94m   |[93m ^^^^^^[93m hint  : Use a module identifier matching regex `^[a-z]+[a-zA-Z0-9_]*$`.
[94m   |[33m       [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: lowercamelcase_module
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:54:8
[94m   |
[94m54 |[37m module M3
[94m   |[93m        ^^[93m hint  : Begin `module` name with lowerCamelCase.
[94m   |[33m          [33m reason: Naming convention simplifies audit.
(B[m
[91mFail[97m: interface_port_with_modport
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:55:5
[94m   |
[94m55 |[37m   ( I u_I
[94m   |[93m     ^[93m hint  : Specify the modport on the interface port.
[94m   |[33m      [33m reason: Without a modport, the interface port signals are all implictly `inout`.
(B[m
[91mFail[97m: lowercamelcase_interface
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:55:5
[94m   |
[94m55 |[37m   ( I u_I
[94m   |[93m     ^[93m hint  : Begin `interface` name with lowerCamelCase.
[94m   |[33m      [33m reason: Naming convention simplifies audit.
(B[m
[91mFail[97m: re_forbidden_port_inout
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:55:7
[94m   |
[94m55 |[37m   ( I u_I
[94m   |[93m       ^^^[93m hint  : Use a port identifier not matching regex `^[^X](UNCONFIGURED|.*)$`.
[94m   |[33m          [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: re_forbidden_port_interface
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:55:7
[94m   |
[94m55 |[37m   ( I u_I
[94m   |[93m       ^^^[93m hint  : Use a port identifier not matching regex `^[^X](UNCONFIGURED|.*)$`.
[94m   |[33m          [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: re_required_port_inout
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:55:7
[94m   |
[94m55 |[37m   ( I u_I
[94m   |[93m       ^^^[93m hint  : Use a port identifier matching regex `^[a-z]+[a-z0-9_]*$`.
[94m   |[33m          [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: re_required_port_interface
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:55:7
[94m   |
[94m55 |[37m   ( I u_I
[94m   |[93m       ^^^[93m hint  : Use a port identifier matching regex `^[a-z]+[a-z0-9_]*$`.
[94m   |[33m          [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: output_with_var
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:56:5
[94m   |
[94m56 |[37m   , output logic a
[94m   |[93m     ^^^^^^[93m hint  : Specify `var` datakind on `output` ports.
[94m   |[33m           [33m reason: Explicit datakind of output ports should be consistent with input ports.
(B[m
[91mFail[97m: prefix_output
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:56:5
[94m   |
[94m56 |[37m   , output logic a
[94m   |[93m     ^^^^^^[93m hint  : Prefix `output` port identifier with "o_".
[94m   |[33m           [33m reason: Port prefixes help readers to follow signals through modules.
(B[m
[91mFail[97m: re_forbidden_port_output
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:56:18
[94m   |
[94m56 |[37m   , output logic a
[94m   |[93m                  ^[93m hint  : Use a port identifier not matching regex `^[^X](UNCONFIGURED|.*)$`.
[94m   |[33m                   [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: output_with_var
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:57:5
[94m   |
[94m57 |[37m   , output logic b
[94m   |[93m     ^^^^^^[93m hint  : Specify `var` datakind on `output` ports.
[94m   |[33m           [33m reason: Explicit datakind of output ports should be consistent with input ports.
(B[m
[91mFail[97m: prefix_output
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:57:5
[94m   |
[94m57 |[37m   , output logic b
[94m   |[93m     ^^^^^^[93m hint  : Prefix `output` port identifier with "o_".
[94m   |[33m           [33m reason: Port prefixes help readers to follow signals through modules.
(B[m
[91mFail[97m: re_forbidden_port_output
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:57:18
[94m   |
[94m57 |[37m   , output logic b
[94m   |[93m                  ^[93m hint  : Use a port identifier not matching regex `^[^X](UNCONFIGURED|.*)$`.
[94m   |[33m                   [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: output_with_var
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:58:5
[94m   |
[94m58 |[37m   , output logic c
[94m   |[93m     ^^^^^^[93m hint  : Specify `var` datakind on `output` ports.
[94m   |[33m           [33m reason: Explicit datakind of output ports should be consistent with input ports.
(B[m
[91mFail[97m: prefix_output
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:58:5
[94m   |
[94m58 |[37m   , output logic c
[94m   |[93m     ^^^^^^[93m hint  : Prefix `output` port identifier with "o_".
[94m   |[33m           [33m reason: Port prefixes help readers to follow signals through modules.
(B[m
[91mFail[97m: re_forbidden_port_output
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:58:18
[94m   |
[94m58 |[37m   , output logic c
[94m   |[93m                  ^[93m hint  : Use a port identifier not matching regex `^[^X](UNCONFIGURED|.*)$`.
[94m   |[33m                   [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: style_trailingwhitespace
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:60:0
[94m   |
[94m60 |[37m 
[94m   |[93m [93m hint  : Remove trailing whitespace.
[94m   |[33m [33m reason: Trailing whitespace leads to unnecessary awkwardness with version control.
(B[m
[91mFail[97m: lowercamelcase_module
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:61:3
[94m   |
[94m61 |[37m   M2 u_M2 
[94m   |[93m   ^^[93m hint  : Begin `module` name with lowerCamelCase.
[94m   |[33m     [33m reason: Naming convention simplifies audit.
(B[m
[91mFail[97m: re_forbidden_instance
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:61:6
[94m   |
[94m61 |[37m   M2 u_M2 
[94m   |[93m      ^^^^[93m hint  : Use an instance identifier not matching regex `^[^X](UNCONFIGURED|.*)$`.
[94m   |[33m          [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: re_required_instance
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:61:6
[94m   |
[94m61 |[37m   M2 u_M2 
[94m   |[93m      ^^^^[93m hint  : Use an instance identifier matching regex `^[a-z]+[a-z0-9_]*$`.
[94m   |[33m          [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: style_trailingwhitespace
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:62:0
[94m   |
[94m62 |[37m 
[94m   |[93m [93m hint  : Remove trailing whitespace.
[94m   |[33m [33m reason: Trailing whitespace leads to unnecessary awkwardness with version control.
(B[m
[91mFail[97m: default_nettype_none
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:72:1
[94m   |
[94m72 |[37m module top
[94m   |[93m ^^^^^^[93m hint  : Place `` `default_nettype none`` at the top of source code.
[94m   |[33m       [33m reason: Compiler directive `` `default_nettype none`` detects unintentional implicit wires.
(B[m
[91mFail[97m: prefix_module
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:72:1
[94m   |
[94m72 |[37m module top
[94m   |[93m ^^^^^^[93m hint  : Prefix `module` identifier with "mod_".
[94m   |[33m       [33m reason: Naming convention simplifies audit.
(B[m
[91mFail[97m: re_forbidden_module_ansi
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:72:1
[94m   |
[94m72 |[37m module top
[94m   |[93m ^^^^^^[93m hint  : Use a module identifier not matching regex `^[^X](UNCONFIGURED|.*)$`.
[94m   |[33m       [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: uppercamelcase_module
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:72:8
[94m   |
[94m72 |[37m module top
[94m   |[93m        ^^^[93m hint  : Begin `module` name with UpperCamelCase.
[94m   |[33m           [33m reason: Naming convention simplifies audit.
(B[m
[91mFail[97m: input_with_var
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:73:5
[94m   |
[94m73 |[37m   ( input logic i_clk
[94m   |[93m     ^^^^^[93m hint  : Specify `var` datakind on `input` ports.
[94m   |[33m          [33m reason: Default datakind of input port is a tri-state net.
(B[m
[91mFail[97m: re_forbidden_port_input
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:73:17
[94m   |
[94m73 |[37m   ( input logic i_clk
[94m   |[93m                 ^^^^^[93m hint  : Use a port identifier not matching regex `^[^X](UNCONFIGURED|.*)$`.
[94m   |[33m                      [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: output_with_var
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:74:5
[94m   |
[94m74 |[37m   , output logic a
[94m   |[93m     ^^^^^^[93m hint  : Specify `var` datakind on `output` ports.
[94m   |[33m           [33m reason: Explicit datakind of output ports should be consistent with input ports.
(B[m
[91mFail[97m: prefix_output
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:74:5
[94m   |
[94m74 |[37m   , output logic a
[94m   |[93m     ^^^^^^[93m hint  : Prefix `output` port identifier with "o_".
[94m   |[33m           [33m reason: Port prefixes help readers to follow signals through modules.
(B[m
[91mFail[97m: re_forbidden_port_output
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:74:18
[94m   |
[94m74 |[37m   , output logic a
[94m   |[93m                  ^[93m hint  : Use a port identifier not matching regex `^[^X](UNCONFIGURED|.*)$`.
[94m   |[33m                   [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: output_with_var
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:75:5
[94m   |
[94m75 |[37m   , output logic b
[94m   |[93m     ^^^^^^[93m hint  : Specify `var` datakind on `output` ports.
[94m   |[33m           [33m reason: Explicit datakind of output ports should be consistent with input ports.
(B[m
[91mFail[97m: prefix_output
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:75:5
[94m   |
[94m75 |[37m   , output logic b
[94m   |[93m     ^^^^^^[93m hint  : Prefix `output` port identifier with "o_".
[94m   |[33m           [33m reason: Port prefixes help readers to follow signals through modules.
(B[m
[91mFail[97m: re_forbidden_port_output
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:75:18
[94m   |
[94m75 |[37m   , output logic b
[94m   |[93m                  ^[93m hint  : Use a port identifier not matching regex `^[^X](UNCONFIGURED|.*)$`.
[94m   |[33m                   [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: output_with_var
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:76:5
[94m   |
[94m76 |[37m   , output logic c
[94m   |[93m     ^^^^^^[93m hint  : Specify `var` datakind on `output` ports.
[94m   |[33m           [33m reason: Explicit datakind of output ports should be consistent with input ports.
(B[m
[91mFail[97m: prefix_output
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:76:5
[94m   |
[94m76 |[37m   , output logic c
[94m   |[93m     ^^^^^^[93m hint  : Prefix `output` port identifier with "o_".
[94m   |[33m           [33m reason: Port prefixes help readers to follow signals through modules.
(B[m
[91mFail[97m: re_forbidden_port_output
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:76:18
[94m   |
[94m76 |[37m   , output logic c
[94m   |[93m                  ^[93m hint  : Use a port identifier not matching regex `^[^X](UNCONFIGURED|.*)$`.
[94m   |[33m                   [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: style_trailingwhitespace
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:78:0
[94m   |
[94m78 |[37m 
[94m   |[93m [93m hint  : Remove trailing whitespace.
[94m   |[33m [33m reason: Trailing whitespace leads to unnecessary awkwardness with version control.
(B[m
[91mFail[97m: lowercamelcase_module
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:79:3
[94m   |
[94m79 |[37m   I u_I 
[94m   |[93m   ^[93m hint  : Begin `module` name with lowerCamelCase.
[94m   |[33m    [33m reason: Naming convention simplifies audit.
(B[m
[91mFail[97m: re_forbidden_instance
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:79:5
[94m   |
[94m79 |[37m   I u_I 
[94m   |[93m     ^^^[93m hint  : Use an instance identifier not matching regex `^[^X](UNCONFIGURED|.*)$`.
[94m   |[33m        [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: re_required_instance
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:79:5
[94m   |
[94m79 |[37m   I u_I 
[94m   |[93m     ^^^[93m hint  : Use an instance identifier matching regex `^[a-z]+[a-z0-9_]*$`.
[94m   |[33m        [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: style_trailingwhitespace
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:80:0
[94m   |
[94m80 |[37m 
[94m   |[93m [93m hint  : Remove trailing whitespace.
[94m   |[33m [33m reason: Trailing whitespace leads to unnecessary awkwardness with version control.
(B[m
[91mFail[97m: lowercamelcase_module
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:83:3
[94m   |
[94m83 |[37m   M3 u_M3 
[94m   |[93m   ^^[93m hint  : Begin `module` name with lowerCamelCase.
[94m   |[33m     [33m reason: Naming convention simplifies audit.
(B[m
[91mFail[97m: re_forbidden_instance
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:83:6
[94m   |
[94m83 |[37m   M3 u_M3 
[94m   |[93m      ^^^^[93m hint  : Use an instance identifier not matching regex `^[^X](UNCONFIGURED|.*)$`.
[94m   |[33m          [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: re_required_instance
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:83:6
[94m   |
[94m83 |[37m   M3 u_M3 
[94m   |[93m      ^^^^[93m hint  : Use an instance identifier matching regex `^[a-z]+[a-z0-9_]*$`.
[94m   |[33m          [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: style_trailingwhitespace
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:84:0
[94m   |
[94m84 |[37m 
[94m   |[93m [93m hint  : Remove trailing whitespace.
[94m   |[33m [33m reason: Trailing whitespace leads to unnecessary awkwardness with version control.
(B[m
[91mFail[97m: style_trailingwhitespace
[94m   -->[37m testcases/alwaysff_misc_svi_hierachicalModuleRefInst.sv:87:0
[94m   |
[94m87 |[37m 
[94m   |[93m [93m hint  : Remove trailing whitespace.
[94m   |[33m [33m reason: Trailing whitespace leads to unnecessary awkwardness with version control.
(B[m
FAILURE
