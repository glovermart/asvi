[93mWarning[97m: Config file '.svlint.toml' is not found. Enable all rules(B[m
[91mFail[97m: style_trailingwhitespace
[94m   -->[37m testcases/alwayscomb_packed_port_modportExpressions_twoGenericInterfaces_twoInstancesModule.sv:4:1
[94m  |
[94m4 |[37m // NOTE: Lines 21, 22, 36, 37, 40, and 41. 
[94m  |[93m ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[93m hint  : Remove trailing whitespace.
[94m  |[33m                                            [33m reason: Trailing whitespace leads to unnecessary awkwardness with version control.
(B[m
[91mFail[97m: default_nettype_none
[94m   -->[37m testcases/alwayscomb_packed_port_modportExpressions_twoGenericInterfaces_twoInstancesModule.sv:6:1
[94m  |
[94m6 |[37m interface I;
[94m  |[93m ^^^^^^^^^[93m hint  : Place `` `default_nettype none`` at the top of source code.
[94m  |[33m          [33m reason: Compiler directive `` `default_nettype none`` detects unintentional implicit wires.
(B[m
[91mFail[97m: prefix_interface
[94m   -->[37m testcases/alwayscomb_packed_port_modportExpressions_twoGenericInterfaces_twoInstancesModule.sv:6:1
[94m  |
[94m6 |[37m interface I;
[94m  |[93m ^^^^^^^^^[93m hint  : Prefix `interface` identifier with "ifc_".
[94m  |[33m          [33m reason: Naming convention simplifies audit.
(B[m
[91mFail[97m: re_forbidden_interface
[94m   -->[37m testcases/alwayscomb_packed_port_modportExpressions_twoGenericInterfaces_twoInstancesModule.sv:6:1
[94m  |
[94m6 |[37m interface I;
[94m  |[93m ^^^^^^^^^[93m hint  : Use a interface identifier not matching regex `^[^X](UNCONFIGURED|.*)$`.
[94m  |[33m          [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: re_required_interface
[94m   -->[37m testcases/alwayscomb_packed_port_modportExpressions_twoGenericInterfaces_twoInstancesModule.sv:6:1
[94m  |
[94m6 |[37m interface I;
[94m  |[93m ^^^^^^^^^[93m hint  : Use a interface identifier matching regex `^[a-z]+[a-z0-9_]*$`.
[94m  |[33m          [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: lowercamelcase_interface
[94m   -->[37m testcases/alwayscomb_packed_port_modportExpressions_twoGenericInterfaces_twoInstancesModule.sv:6:11
[94m  |
[94m6 |[37m interface I;
[94m  |[93m           ^[93m hint  : Begin `interface` name with lowerCamelCase.
[94m  |[33m            [33m reason: Naming convention simplifies audit.
(B[m
[91mFail[97m: style_trailingwhitespace
[94m   -->[37m testcases/alwayscomb_packed_port_modportExpressions_twoGenericInterfaces_twoInstancesModule.sv:7:0
[94m  |
[94m7 |[37m 
[94m  |[93m [93m hint  : Remove trailing whitespace.
[94m  |[33m [33m reason: Trailing whitespace leads to unnecessary awkwardness with version control.
(B[m
[91mFail[97m: re_forbidden_modport
[94m   -->[37m testcases/alwayscomb_packed_port_modportExpressions_twoGenericInterfaces_twoInstancesModule.sv:10:3
[94m   |
[94m10 |[37m   modport P1
[94m   |[93m   ^^^^^^^[93m hint  : Use a modport identifier not matching regex `^[^X](UNCONFIGURED|.*)$`.
[94m   |[33m          [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: re_required_modport
[94m   -->[37m testcases/alwayscomb_packed_port_modportExpressions_twoGenericInterfaces_twoInstancesModule.sv:10:3
[94m   |
[94m10 |[37m   modport P1
[94m   |[93m   ^^^^^^^[93m hint  : Use a modport identifier matching regex `^[a-z]+[a-z0-9_]*$`.
[94m   |[33m          [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: re_forbidden_modport
[94m   -->[37m testcases/alwayscomb_packed_port_modportExpressions_twoGenericInterfaces_twoInstancesModule.sv:14:3
[94m   |
[94m14 |[37m   modport P2
[94m   |[93m   ^^^^^^^[93m hint  : Use a modport identifier not matching regex `^[^X](UNCONFIGURED|.*)$`.
[94m   |[33m          [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: re_required_modport
[94m   -->[37m testcases/alwayscomb_packed_port_modportExpressions_twoGenericInterfaces_twoInstancesModule.sv:14:3
[94m   |
[94m14 |[37m   modport P2
[94m   |[93m   ^^^^^^^[93m hint  : Use a modport identifier matching regex `^[a-z]+[a-z0-9_]*$`.
[94m   |[33m          [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: default_nettype_none
[94m   -->[37m testcases/alwayscomb_packed_port_modportExpressions_twoGenericInterfaces_twoInstancesModule.sv:21:1
[94m   |
[94m21 |[37m module M
[94m   |[93m ^^^^^^[93m hint  : Place `` `default_nettype none`` at the top of source code.
[94m   |[33m       [33m reason: Compiler directive `` `default_nettype none`` detects unintentional implicit wires.
(B[m
[91mFail[97m: prefix_module
[94m   -->[37m testcases/alwayscomb_packed_port_modportExpressions_twoGenericInterfaces_twoInstancesModule.sv:21:1
[94m   |
[94m21 |[37m module M
[94m   |[93m ^^^^^^[93m hint  : Prefix `module` identifier with "mod_".
[94m   |[33m       [33m reason: Naming convention simplifies audit.
(B[m
[91mFail[97m: re_forbidden_module_ansi
[94m   -->[37m testcases/alwayscomb_packed_port_modportExpressions_twoGenericInterfaces_twoInstancesModule.sv:21:1
[94m   |
[94m21 |[37m module M
[94m   |[93m ^^^^^^[93m hint  : Use a module identifier not matching regex `^[^X](UNCONFIGURED|.*)$`.
[94m   |[33m       [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: re_required_module_ansi
[94m   -->[37m testcases/alwayscomb_packed_port_modportExpressions_twoGenericInterfaces_twoInstancesModule.sv:21:1
[94m   |
[94m21 |[37m module M
[94m   |[93m ^^^^^^[93m hint  : Use a module identifier matching regex `^[a-z]+[a-zA-Z0-9_]*$`.
[94m   |[33m       [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: lowercamelcase_module
[94m   -->[37m testcases/alwayscomb_packed_port_modportExpressions_twoGenericInterfaces_twoInstancesModule.sv:21:8
[94m   |
[94m21 |[37m module M
[94m   |[93m        ^[93m hint  : Begin `module` name with lowerCamelCase.
[94m   |[33m         [33m reason: Naming convention simplifies audit.
(B[m
[91mFail[97m: interface_port_with_modport
[94m   -->[37m testcases/alwayscomb_packed_port_modportExpressions_twoGenericInterfaces_twoInstancesModule.sv:22:5
[94m   |
[94m22 |[37m   ( interface i  // Generic interface 1.
[94m   |[93m     ^^^^^^^^^[93m hint  : Specify the modport on the interface port.
[94m   |[33m              [33m reason: Without a modport, the interface port signals are all implictly `inout`.
(B[m
[91mFail[97m: re_forbidden_port_inout
[94m   -->[37m testcases/alwayscomb_packed_port_modportExpressions_twoGenericInterfaces_twoInstancesModule.sv:22:15
[94m   |
[94m22 |[37m   ( interface i  // Generic interface 1.
[94m   |[93m               ^[93m hint  : Use a port identifier not matching regex `^[^X](UNCONFIGURED|.*)$`.
[94m   |[33m                [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: re_forbidden_port_interface
[94m   -->[37m testcases/alwayscomb_packed_port_modportExpressions_twoGenericInterfaces_twoInstancesModule.sv:22:15
[94m   |
[94m22 |[37m   ( interface i  // Generic interface 1.
[94m   |[93m               ^[93m hint  : Use a port identifier not matching regex `^[^X](UNCONFIGURED|.*)$`.
[94m   |[33m                [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: interface_port_with_modport
[94m   -->[37m testcases/alwayscomb_packed_port_modportExpressions_twoGenericInterfaces_twoInstancesModule.sv:23:5
[94m   |
[94m23 |[37m   , interface j  // Generic interface 2.
[94m   |[93m     ^^^^^^^^^[93m hint  : Specify the modport on the interface port.
[94m   |[33m              [33m reason: Without a modport, the interface port signals are all implictly `inout`.
(B[m
[91mFail[97m: re_forbidden_port_inout
[94m   -->[37m testcases/alwayscomb_packed_port_modportExpressions_twoGenericInterfaces_twoInstancesModule.sv:23:15
[94m   |
[94m23 |[37m   , interface j  // Generic interface 2.
[94m   |[93m               ^[93m hint  : Use a port identifier not matching regex `^[^X](UNCONFIGURED|.*)$`.
[94m   |[33m                [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: re_forbidden_port_interface
[94m   -->[37m testcases/alwayscomb_packed_port_modportExpressions_twoGenericInterfaces_twoInstancesModule.sv:23:15
[94m   |
[94m23 |[37m   , interface j  // Generic interface 2.
[94m   |[93m               ^[93m hint  : Use a port identifier not matching regex `^[^X](UNCONFIGURED|.*)$`.
[94m   |[33m                [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: style_trailingwhitespace
[94m   -->[37m testcases/alwayscomb_packed_port_modportExpressions_twoGenericInterfaces_twoInstancesModule.sv:25:0
[94m   |
[94m25 |[37m 
[94m   |[93m [93m hint  : Remove trailing whitespace.
[94m   |[33m [33m reason: Trailing whitespace leads to unnecessary awkwardness with version control.
(B[m
[91mFail[97m: style_trailingwhitespace
[94m   -->[37m testcases/alwayscomb_packed_port_modportExpressions_twoGenericInterfaces_twoInstancesModule.sv:29:0
[94m   |
[94m29 |[37m 
[94m   |[93m [93m hint  : Remove trailing whitespace.
[94m   |[33m [33m reason: Trailing whitespace leads to unnecessary awkwardness with version control.
(B[m
[91mFail[97m: default_nettype_none
[94m   -->[37m testcases/alwayscomb_packed_port_modportExpressions_twoGenericInterfaces_twoInstancesModule.sv:32:1
[94m   |
[94m32 |[37m module top
[94m   |[93m ^^^^^^[93m hint  : Place `` `default_nettype none`` at the top of source code.
[94m   |[33m       [33m reason: Compiler directive `` `default_nettype none`` detects unintentional implicit wires.
(B[m
[91mFail[97m: prefix_module
[94m   -->[37m testcases/alwayscomb_packed_port_modportExpressions_twoGenericInterfaces_twoInstancesModule.sv:32:1
[94m   |
[94m32 |[37m module top
[94m   |[93m ^^^^^^[93m hint  : Prefix `module` identifier with "mod_".
[94m   |[33m       [33m reason: Naming convention simplifies audit.
(B[m
[91mFail[97m: re_forbidden_module_ansi
[94m   -->[37m testcases/alwayscomb_packed_port_modportExpressions_twoGenericInterfaces_twoInstancesModule.sv:32:1
[94m   |
[94m32 |[37m module top
[94m   |[93m ^^^^^^[93m hint  : Use a module identifier not matching regex `^[^X](UNCONFIGURED|.*)$`.
[94m   |[33m       [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: uppercamelcase_module
[94m   -->[37m testcases/alwayscomb_packed_port_modportExpressions_twoGenericInterfaces_twoInstancesModule.sv:32:8
[94m   |
[94m32 |[37m module top
[94m   |[93m        ^^^[93m hint  : Begin `module` name with UpperCamelCase.
[94m   |[33m           [33m reason: Naming convention simplifies audit.
(B[m
[91mFail[97m: output_with_var
[94m   -->[37m testcases/alwayscomb_packed_port_modportExpressions_twoGenericInterfaces_twoInstancesModule.sv:33:5
[94m   |
[94m33 |[37m   ( output logic [7:0] o_a
[94m   |[93m     ^^^^^^[93m hint  : Specify `var` datakind on `output` ports.
[94m   |[33m           [33m reason: Explicit datakind of output ports should be consistent with input ports.
(B[m
[91mFail[97m: re_forbidden_port_output
[94m   -->[37m testcases/alwayscomb_packed_port_modportExpressions_twoGenericInterfaces_twoInstancesModule.sv:33:24
[94m   |
[94m33 |[37m   ( output logic [7:0] o_a
[94m   |[93m                        ^^^[93m hint  : Use a port identifier not matching regex `^[^X](UNCONFIGURED|.*)$`.
[94m   |[33m                           [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: lowercamelcase_module
[94m   -->[37m testcases/alwayscomb_packed_port_modportExpressions_twoGenericInterfaces_twoInstancesModule.sv:36:3
[94m   |
[94m36 |[37m   I u_I ();
[94m   |[93m   ^[93m hint  : Begin `module` name with lowerCamelCase.
[94m   |[33m    [33m reason: Naming convention simplifies audit.
(B[m
[91mFail[97m: re_forbidden_instance
[94m   -->[37m testcases/alwayscomb_packed_port_modportExpressions_twoGenericInterfaces_twoInstancesModule.sv:36:5
[94m   |
[94m36 |[37m   I u_I ();
[94m   |[93m     ^^^[93m hint  : Use an instance identifier not matching regex `^[^X](UNCONFIGURED|.*)$`.
[94m   |[33m        [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: re_required_instance
[94m   -->[37m testcases/alwayscomb_packed_port_modportExpressions_twoGenericInterfaces_twoInstancesModule.sv:36:5
[94m   |
[94m36 |[37m   I u_I ();
[94m   |[93m     ^^^[93m hint  : Use an instance identifier matching regex `^[a-z]+[a-z0-9_]*$`.
[94m   |[33m        [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: lowercamelcase_module
[94m   -->[37m testcases/alwayscomb_packed_port_modportExpressions_twoGenericInterfaces_twoInstancesModule.sv:38:3
[94m   |
[94m38 |[37m   M u_M1 
[94m   |[93m   ^[93m hint  : Begin `module` name with lowerCamelCase.
[94m   |[33m    [33m reason: Naming convention simplifies audit.
(B[m
[91mFail[97m: re_forbidden_instance
[94m   -->[37m testcases/alwayscomb_packed_port_modportExpressions_twoGenericInterfaces_twoInstancesModule.sv:38:5
[94m   |
[94m38 |[37m   M u_M1 
[94m   |[93m     ^^^^[93m hint  : Use an instance identifier not matching regex `^[^X](UNCONFIGURED|.*)$`.
[94m   |[33m         [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: re_required_instance
[94m   -->[37m testcases/alwayscomb_packed_port_modportExpressions_twoGenericInterfaces_twoInstancesModule.sv:38:5
[94m   |
[94m38 |[37m   M u_M1 
[94m   |[93m     ^^^^[93m hint  : Use an instance identifier matching regex `^[a-z]+[a-z0-9_]*$`.
[94m   |[33m         [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: style_trailingwhitespace
[94m   -->[37m testcases/alwayscomb_packed_port_modportExpressions_twoGenericInterfaces_twoInstancesModule.sv:39:0
[94m   |
[94m39 |[37m 
[94m   |[93m [93m hint  : Remove trailing whitespace.
[94m   |[33m [33m reason: Trailing whitespace leads to unnecessary awkwardness with version control.
(B[m
[91mFail[97m: lowercamelcase_module
[94m   -->[37m testcases/alwayscomb_packed_port_modportExpressions_twoGenericInterfaces_twoInstancesModule.sv:42:3
[94m   |
[94m42 |[37m   M u_M2
[94m   |[93m   ^[93m hint  : Begin `module` name with lowerCamelCase.
[94m   |[33m    [33m reason: Naming convention simplifies audit.
(B[m
[91mFail[97m: re_forbidden_instance
[94m   -->[37m testcases/alwayscomb_packed_port_modportExpressions_twoGenericInterfaces_twoInstancesModule.sv:42:5
[94m   |
[94m42 |[37m   M u_M2
[94m   |[93m     ^^^^[93m hint  : Use an instance identifier not matching regex `^[^X](UNCONFIGURED|.*)$`.
[94m   |[33m         [33m reason: Identifiers must conform to the naming scheme.
(B[m
[91mFail[97m: re_required_instance
[94m   -->[37m testcases/alwayscomb_packed_port_modportExpressions_twoGenericInterfaces_twoInstancesModule.sv:42:5
[94m   |
[94m42 |[37m   M u_M2
[94m   |[93m     ^^^^[93m hint  : Use an instance identifier matching regex `^[a-z]+[a-z0-9_]*$`.
[94m   |[33m         [33m reason: Identifiers must conform to the naming scheme.
(B[m
FAILURE
